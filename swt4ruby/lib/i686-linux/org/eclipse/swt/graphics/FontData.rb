require "rjava"

# Copyright (c) 2000, 2008 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
# 
# Contributors:
# IBM Corporation - initial API and implementation
module Org::Eclipse::Swt::Graphics
  module FontDataImports
    class_module.module_eval {
      include ::Java::Lang
      include ::Org::Eclipse::Swt::Graphics
      include ::Org::Eclipse::Swt
    }
  end
  
  # Instances of this class describe operating system fonts.
  # <p>
  # For platform-independent behaviour, use the get and set methods
  # corresponding to the following properties:
  # <dl>
  # <dt>height</dt><dd>the height of the font in points</dd>
  # <dt>name</dt><dd>the face name of the font, which may include the foundry</dd>
  # <dt>style</dt><dd>A bitwise combination of NORMAL, ITALIC and BOLD</dd>
  # </dl>
  # If extra, platform-dependent functionality is required:
  # <ul>
  # <li>On <em>Windows</em>, the data member of the <code>FontData</code>
  # corresponds to a Windows <code>LOGFONT</code> structure whose fields
  # may be retrieved and modified.</li>
  # <li>On <em>X</em>, the fields of the <code>FontData</code> correspond
  # to the entries in the font's XLFD name and may be retrieved and modified.
  # </ul>
  # Application code does <em>not</em> need to explicitly release the
  # resources managed by each instance when those instances are no longer
  # required, and thus no <code>dispose()</code> method is provided.
  # 
  # @see Font
  # @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
  class FontData 
    include_class_members FontDataImports
    
    # the font name
    # (Warning: This field is platform dependent)
    # <p>
    # <b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
    # public API. It is marked public only so that it can be shared
    # within the packages provided by SWT. It is not available on all
    # platforms and should never be accessed from application code.
    # </p>
    attr_accessor :name
    alias_method :attr_name, :name
    undef_method :name
    alias_method :attr_name=, :name=
    undef_method :name=
    
    # The height of the font data in points
    # (Warning: This field is platform dependent)
    # <p>
    # <b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
    # public API. It is marked public only so that it can be shared
    # within the packages provided by SWT. It is not available on all
    # platforms and should never be accessed from application code.
    # </p>
    attr_accessor :height
    alias_method :attr_height, :height
    undef_method :height
    alias_method :attr_height=, :height=
    undef_method :height=
    
    # the font style
    # (Warning: This field is platform dependent)
    # <p>
    # <b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
    # public API. It is marked public only so that it can be shared
    # within the packages provided by SWT. It is not available on all
    # platforms and should never be accessed from application code.
    # </p>
    attr_accessor :style
    alias_method :attr_style, :style
    undef_method :style
    alias_method :attr_style=, :style=
    undef_method :style=
    
    # the Pango string
    # (Warning: This field is platform dependent)
    # <p>
    # <b>IMPORTANT:</b> This field is <em>not</em> part of the SWT
    # public API. It is marked public only so that it can be shared
    # within the packages provided by SWT. It is not available on all
    # platforms and should never be accessed from application code.
    # </p>
    attr_accessor :string
    alias_method :attr_string, :string
    undef_method :string
    alias_method :attr_string=, :string=
    undef_method :string=
    
    # The locales of the font
    attr_accessor :lang
    alias_method :attr_lang, :lang
    undef_method :lang
    alias_method :attr_lang=, :lang=
    undef_method :lang=
    
    attr_accessor :country
    alias_method :attr_country, :country
    undef_method :country
    alias_method :attr_country=, :country=
    undef_method :country=
    
    attr_accessor :variant
    alias_method :attr_variant, :variant
    undef_method :variant
    alias_method :attr_variant=, :variant=
    undef_method :variant=
    
    typesig { [] }
    # Constructs a new uninitialized font data.
    def initialize
      initialize__font_data("", 12, SWT::NORMAL)
    end
    
    typesig { [String] }
    # Constructs a new FontData given a string representation
    # in the form generated by the <code>FontData.toString</code>
    # method.
    # <p>
    # Note that the representation varies between platforms,
    # and a FontData can only be created from a string that was
    # generated on the same platform.
    # </p>
    # 
    # @param string the string representation of a <code>FontData</code> (must not be null)
    # 
    # @exception IllegalArgumentException <ul>
    # <li>ERROR_NULL_ARGUMENT - if the argument is null</li>
    # <li>ERROR_INVALID_ARGUMENT - if the argument does not represent a valid description</li>
    # </ul>
    # 
    # @see #toString
    def initialize(string)
      @name = nil
      @height = 0.0
      @style = 0
      @string = nil
      @lang = nil
      @country = nil
      @variant = nil
      if ((string).nil?)
        SWT.error(SWT::ERROR_NULL_ARGUMENT)
      end
      start = 0
      end_ = string.index_of(Character.new(?|.ord))
      if ((end_).equal?(-1))
        SWT.error(SWT::ERROR_INVALID_ARGUMENT)
      end
      version1 = string.substring(start, end_)
      begin
        if (!(JavaInteger.parse_int(version1)).equal?(1))
          SWT.error(SWT::ERROR_INVALID_ARGUMENT)
        end
      rescue NumberFormatException => e
        SWT.error(SWT::ERROR_INVALID_ARGUMENT)
      end
      start = end_ + 1
      end_ = string.index_of(Character.new(?|.ord), start)
      if ((end_).equal?(-1))
        SWT.error(SWT::ERROR_INVALID_ARGUMENT)
      end
      name = string.substring(start, end_)
      start = end_ + 1
      end_ = string.index_of(Character.new(?|.ord), start)
      if ((end_).equal?(-1))
        SWT.error(SWT::ERROR_INVALID_ARGUMENT)
      end
      height = 0
      begin
        height = Float.parse_float(string.substring(start, end_))
      rescue NumberFormatException => e
        SWT.error(SWT::ERROR_INVALID_ARGUMENT)
      end
      start = end_ + 1
      end_ = string.index_of(Character.new(?|.ord), start)
      if ((end_).equal?(-1))
        SWT.error(SWT::ERROR_INVALID_ARGUMENT)
      end
      style = 0
      begin
        style = JavaInteger.parse_int(string.substring(start, end_))
      rescue NumberFormatException => e
        SWT.error(SWT::ERROR_INVALID_ARGUMENT)
      end
      start = end_ + 1
      end_ = string.index_of(Character.new(?|.ord), start)
      set_name(name)
      set_height(height)
      set_style(style)
      if ((end_).equal?(-1))
        return
      end
      platform = string.substring(start, end_)
      start = end_ + 1
      end_ = string.index_of(Character.new(?|.ord), start)
      if ((end_).equal?(-1))
        return
      end
      version2 = string.substring(start, end_)
      if ((platform == "GTK") && (version2 == "1"))
        return
      end
    end
    
    typesig { [String, ::Java::Int, ::Java::Int] }
    # Constructs a new font data given a font name,
    # the height of the desired font in points,
    # and a font style.
    # 
    # @param name the name of the font (must not be null)
    # @param height the font height in points
    # @param style a bit or combination of NORMAL, BOLD, ITALIC
    # 
    # @exception IllegalArgumentException <ul>
    # <li>ERROR_NULL_ARGUMENT - when the font name is null</li>
    # <li>ERROR_INVALID_ARGUMENT - if the height is negative</li>
    # </ul>
    def initialize(name, height, style)
      @name = nil
      @height = 0.0
      @style = 0
      @string = nil
      @lang = nil
      @country = nil
      @variant = nil
      set_name(name)
      set_height(height)
      set_style(style)
    end
    
    typesig { [String, ::Java::Float, ::Java::Int] }
    # public
    def initialize(name, height, style)
      @name = nil
      @height = 0.0
      @style = 0
      @string = nil
      @lang = nil
      @country = nil
      @variant = nil
      set_name(name)
      set_height(height)
      set_style(style)
    end
    
    typesig { [Object] }
    # Compares the argument to the receiver, and returns true
    # if they represent the <em>same</em> object using a class
    # specific comparison.
    # 
    # @param object the object to compare with this object
    # @return <code>true</code> if the object is the same as this object and <code>false</code> otherwise
    # 
    # @see #hashCode
    def equals(object)
      if ((object).equal?(self))
        return true
      end
      if (!(object.is_a?(FontData)))
        return false
      end
      data = object
      return (@name == data.attr_name) && (@height).equal?(data.attr_height) && (@style).equal?(data.attr_style)
    end
    
    typesig { [] }
    # Returns the height of the receiver in points.
    # 
    # @return the height of this FontData
    # 
    # @see #setHeight(int)
    def get_height
      return RJava.cast_to_int((0.5 + @height))
    end
    
    typesig { [] }
    # public
    def get_height_f
      return @height
    end
    
    typesig { [] }
    # Returns the locale of the receiver.
    # <p>
    # The locale determines which platform character set this
    # font is going to use. Widgets and graphics operations that
    # use this font will convert UNICODE strings to the platform
    # character set of the specified locale.
    # </p>
    # <p>
    # On platforms where there are multiple character sets for a
    # given language/country locale, the variant portion of the
    # locale will determine the character set.
    # </p>
    # 
    # @return the <code>String</code> representing a Locale object
    # @since 3.0
    def get_locale
      buffer = StringBuffer.new
      sep = Character.new(?_.ord)
      if (!(@lang).nil?)
        buffer.append(@lang)
        buffer.append(sep)
      end
      if (!(@country).nil?)
        buffer.append(@country)
        buffer.append(sep)
      end
      if (!(@variant).nil?)
        buffer.append(@variant)
      end
      result = buffer.to_s
      length_ = result.length
      if (length_ > 0)
        if ((result.char_at(length_ - 1)).equal?(sep))
          result = (result.substring(0, length_ - 1)).to_s
        end
      end
      return result
    end
    
    typesig { [] }
    # Returns the name of the receiver.
    # On platforms that support font foundries, the return value will
    # be the foundry followed by a dash ("-") followed by the face name.
    # 
    # @return the name of this <code>FontData</code>
    # 
    # @see #setName
    def get_name
      return @name
    end
    
    typesig { [] }
    # Returns the style of the receiver which is a bitwise OR of
    # one or more of the <code>SWT</code> constants NORMAL, BOLD
    # and ITALIC.
    # 
    # @return the style of this <code>FontData</code>
    # 
    # @see #setStyle
    def get_style
      return @style
    end
    
    typesig { [] }
    # Returns an integer hash code for the receiver. Any two
    # objects that return <code>true</code> when passed to
    # <code>equals</code> must return the same value for this
    # method.
    # 
    # @return the receiver's hash
    # 
    # @see #equals
    def hash_code
      return @name.hash_code ^ get_height ^ @style
    end
    
    typesig { [::Java::Int] }
    # Sets the height of the receiver. The parameter is
    # specified in terms of points, where a point is one
    # seventy-second of an inch.
    # 
    # @param height the height of the <code>FontData</code>
    # 
    # @exception IllegalArgumentException <ul>
    # <li>ERROR_INVALID_ARGUMENT - if the height is negative</li>
    # </ul>
    # 
    # @see #getHeight
    def set_height(height)
      if (height < 0)
        SWT.error(SWT::ERROR_INVALID_ARGUMENT)
      end
      @height = height
      @string = nil
    end
    
    typesig { [::Java::Float] }
    # public
    def set_height(height)
      if (height < 0)
        SWT.error(SWT::ERROR_INVALID_ARGUMENT)
      end
      @height = height
      @string = nil
    end
    
    typesig { [String] }
    # Sets the locale of the receiver.
    # <p>
    # The locale determines which platform character set this
    # font is going to use. Widgets and graphics operations that
    # use this font will convert UNICODE strings to the platform
    # character set of the specified locale.
    # </p>
    # <p>
    # On platforms where there are multiple character sets for a
    # given language/country locale, the variant portion of the
    # locale will determine the character set.
    # </p>
    # 
    # @param locale the <code>String</code> representing a Locale object
    # @see java.util.Locale#toString
    def set_locale(locale)
      @lang = (@country = (@variant = (nil).to_s).to_s).to_s
      if (!(locale).nil?)
        sep = Character.new(?_.ord)
        length_ = locale.length
        first_sep = 0
        second_sep = 0
        first_sep = locale.index_of(sep)
        if ((first_sep).equal?(-1))
          first_sep = second_sep = length_
        else
          second_sep = locale.index_of(sep, first_sep + 1)
          if ((second_sep).equal?(-1))
            second_sep = length_
          end
        end
        if (first_sep > 0)
          @lang = (locale.substring(0, first_sep)).to_s
        end
        if (second_sep > first_sep + 1)
          @country = (locale.substring(first_sep + 1, second_sep)).to_s
        end
        if (length_ > second_sep + 1)
          @variant = (locale.substring(second_sep + 1)).to_s
        end
      end
    end
    
    typesig { [String] }
    # Sets the name of the receiver.
    # <p>
    # Some platforms support font foundries. On these platforms, the name
    # of the font specified in setName() may have one of the following forms:
    # <ol>
    # <li>a face name (for example, "courier")</li>
    # <li>a foundry followed by a dash ("-") followed by a face name (for example, "adobe-courier")</li>
    # </ol>
    # In either case, the name returned from getName() will include the
    # foundry.
    # </p>
    # <p>
    # On platforms that do not support font foundries, only the face name
    # (for example, "courier") is used in <code>setName()</code> and
    # <code>getName()</code>.
    # </p>
    # 
    # @param name the name of the font data (must not be null)
    # @exception IllegalArgumentException <ul>
    # <li>ERROR_NULL_ARGUMENT - when the font name is null</li>
    # </ul>
    # 
    # @see #getName
    def set_name(name)
      if ((name).nil?)
        SWT.error(SWT::ERROR_NULL_ARGUMENT)
      end
      @name = name
      @string = nil
    end
    
    typesig { [::Java::Int] }
    # Sets the style of the receiver to the argument which must
    # be a bitwise OR of one or more of the <code>SWT</code>
    # constants NORMAL, BOLD and ITALIC.  All other style bits are
    # ignored.
    # 
    # @param style the new style for this <code>FontData</code>
    # 
    # @see #getStyle
    def set_style(style)
      @style = style
      @string = nil
    end
    
    typesig { [] }
    # Returns a string representation of the receiver which is suitable
    # for constructing an equivalent instance using the
    # <code>FontData(String)</code> constructor.
    # 
    # @return a string representation of the FontData
    # 
    # @see FontData
    def to_s
      buffer = StringBuffer.new
      buffer.append("1|")
      buffer.append(get_name)
      buffer.append("|")
      buffer.append(get_height_f)
      buffer.append("|")
      buffer.append(get_style)
      buffer.append("|")
      buffer.append("GTK|1|")
      return buffer.to_s
    end
    
    private
    alias_method :initialize__font_data, :initialize
  end
  
end
